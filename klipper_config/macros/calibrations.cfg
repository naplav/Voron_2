[gcode_macro PID_BED]
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  PID_CALIBRATE HEATER=heater_bed TARGET=110
  SAVE_CONFIG

[gcode_macro PID_HOTEND]
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  M106 S64
  PID_CALIBRATE HEATER=extruder TARGET=250
  SAVE_CONFIG

[gcode_macro Z_ENDSTOP]
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  Z_ENDSTOP_CALIBRATE

[gcode_macro PROBE_CAL]
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  PROBE_CALIBRATE

[gcode_macro IS_CAL]
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  SHAPER_CALIBRATE

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  M117 INPUT SHAPER: Noise values, check if sensor is installed
  MEASURE_AXES_NOISE                                    ; get noise value in log
  M117 INPUT SHAPER: Resonance Tests starting
  M117 INPUT SHAPER: Mesasure X axis
  TEST_RESONANCES AXIS=X                                ; measure X
  M117 INPUT SHAPER: Mesasure Y axis
  TEST_RESONANCES AXIS=Y                                ; measure Y
  M117 INPUT SHAPER: Resonance Tests done
  M117 INPUT SHAPER: Generate graph in backround
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro TEST_BELTS] 
gcode:
  CG28
  MOVE_NOZZLE_CENTER
  PREPARE_RESONANCES_TEST 
  M117 BELT TEST: Noise values, check if sensor is installed
  MEASURE_AXES_NOISE                                    ; get noise value in log 
  M117 BELT TEST: Resonance Tests starting ...
  M117 BELT TEST: Mesasure A belt
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=a 
  M117 BELT TEST: Mesasure B belt
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=b 
  M117 BELT TEST: Resonance Tests done
  M117 BELT TEST: Generate graph in backround
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

#[gcode_macro GENERATE_RESONANCES_GRAPH]
#description: "Test resonance on the provided axe and generate graph"
#  @param {string} [AXIS=X] - The axe where you want to run the test
#gcode:
	#{% set axe = params.AXIS|default("X")|string %}

#	CG28
#	{% set axe = "X"|string %}
#  TEST_RESONANCES AXIS={axe}
#  RUN_SHELL_COMMAND CMD=generate_resonance_graph PARAMS={axe}
#	{% set axe = "Y"|string %}
#	TEST_RESONANCES AXIS={axe}
#  RUN_SHELL_COMMAND CMD=generate_resonance_graph PARAMS={axe}

[gcode_macro SPEEDTEST]
gcode: 

    
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(400)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}

    {% set inset = 20.0|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    
    SAVE_GCODE_STATE NAME=speedtest_state
    HOME
    ABSOLUTE_COORDINATES
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    DISPLAYTEXT
    #PARK
    RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED